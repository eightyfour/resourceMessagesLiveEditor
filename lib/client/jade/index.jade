doctype html
html
  head
    title Resource bundle manager
    link(rel='stylesheet', type='text/css', href='/dist/css/translatron.css')
    link(rel='stylesheet', href='/bower_components/octicons/octicons/octicons.css')
    script(type='text/javascript', src='/dist/js/translatron.js')
    script(type='text/javascript', src='/dist/animatedSVG/js/snap.svg-min.js')
    script(type='text/javascript', src='/dist/animatedSVG/js/svgicons.js')
  body(canny-mod='whisker', canny-var='canny.texts.getTexts')
    header.header
      span.beforeText project name:
      span.projectName
        span {{projectName}}
    #resourceEditor.translationView
      #resourceBundleTable(style='display: none', canny-mod='flowControl', canny-flowcontrol="{'view':'resourceBundle'}")
        .header.translationViewHeader
          //
            TODO make this configurable: add module which supports 'projectConfigUpdate'. Than I can easier
            made this kind of configuration configurable (if click on 'edit' just replace the current view with an
            textAre or something like that)
            If this is implemented I need a separate controller which update all texts (also from other users) if
            a texts has been changed...
          p.octicon.octicon-light-bulb.projectDescription(canny-mod='textEditor', canny-var='changeProjectDescription') {{projectDescription}}
          .row(canny-mod='translationViewHeader', canny-var='main')
            #titleKey.data.key
              | Identifier
              em (must be unique)
        #tableBody.content(canny-mod='translationView', canny-translationview='main')
      #initialView.initialView(style='display: block', canny-mod='flowControl', canny-flowcontrol="{'view':'initialView'}")
        .sun
          .wrap(canny-mod='initialView', canny-var='root')
            .projectName.ownProject(canny-mod='projectMainNavigation', canny-var='createNewProject')
              span Or create here your own project
    #debugIncomming
    #fixedNavigation.projectMainNavigation(canny-mod='projectMainNavigation', canny-var='main')
      .menuToggleButton.si-icon.si-icon-hamburger-cross(data-icon-name='hamburgerCross', canny-mod='projectMainNavigation', canny-var='menuToggleButton')
      .projectMainNavigation--header
        span {{projectName}}
      .page-scroll
        .page-scroll--content
          #menuNavigationFrom.menuNavigation.language(canny-mod='projectMainNavigation', canny-var='from')
            // place holder for the menu navigation
          label Project manager
          .menuNavigation.manager
            ul.navigationMenu.manager
              li(canny-mod='translationView', canny-var='projectShow')
                span Create new category
                span.icon.octicon.octicon-tag
              li
                a(canny-mod='projectMainNavigation', canny-var='showFileEditor')
                  span Show in editor mode
                  span.icon.octicon.octicon-squirrel
              li
                a(canny-mod='projectMainNavigation', canny-var='showJSONBundle')
                  span View as JSON
                  span.icon.octicon.octicon-eye
          label Project overview
          .menuNavigation.projects(canny-mod='projectMainNavigation', canny-var='projects')
            ul.navigationMenu
              li(canny-mod='projectMainNavigation', canny-var='createNewProject')
                span Create new project
                span.icon.octicon.octicon-plus
          label Info and help
          .menuNavigation.infoHelp
            ul.navigationMenu.infoHelp
              li
                a(href='https://confluence.gameduell.de/display/MOBS/Language+properties+tool', target='_blank')
                  span about translation tool
                  span.icon.octicon.octicon-light-bulb
              li
                a(href='https://github.com/eightyfour/resourceMessagesLiveEditor', target='_blank')
                  span.icon.octicon.octicon-octoface
          div(style='clear: both;')
    div(canny-mod='layoutManager', canny-var="{'overlay':'translationViewProjectCategoryKey'}")
      .translationView-projectCategory.overlayWindow
        h2 Create a new category
        // <label class="octicon octicon-key">Which name has the category</label>
        .inputWrap.octicon.octicon-puzzle
          input.inputField.category(canny-mod='translationView', canny-var='projectInputCategory', placeholder='enter category name')
        // <label>Enter a key name</label>
        .inputWrap.octicon.octicon-key
          input.inputField.key(canny-mod='translationView', canny-var='projectInputKey', placeholder='enter a key')
        .button(canny-mod='translationView', canny-var='projectSubmit') Create category
        p Please add also a key. Categories can't exists without keys!
    div(canny-mod='layoutManager', canny-var="{'overlay':'createNewProjectView'}")
      .createNewProjectView.overlayWindow
        h2 Create a new project
        // <label class="octicon octicon-puzzle">Which name has the category</label>
        .inputWrap.octicon.octicon-bug
          input.inputField.category(canny-mod='translationView', canny-var='createNewProjectInputProject', placeholder='enter the project name')
        .inputWrap.octicon.octicon-light-bulb
          textarea.inputField.category(canny-mod='translationView', canny-var='createNewProjectProjectDescription', placeholder='enter a project description')
        .button(canny-mod='translationView', canny-var='createNewProjectSubmit') Create category
        p
          | A project name could be a translation task number. Or ask your developer
          | for a technical specific name.
    div(canny-mod='layoutManager', canny-var="{'overlay':'messagesExportOverlay'}")
      #messagesExportOverlay.overlayDark.overlayWindow
        .codeContainer-wrap
          pre#messagesExportOverlay_code.codeContainer(canny-mod='messagesExportOverlay', canny-var='codeContent').
        button.button(canny-mod='messagesExportOverlay', canny-var='closeButton') Close
    div(canny-mod='layoutManager', canny-var="{'overlay':'editorModeView'}")
      #editorModeView.overlayDark.overlayWindow
        .codeContainer-wrap
          #pathMenu.menu-wrapper
            div(canny-mod='pathNavigation')
          div(canny-mod='tabManager')
          .editor-wrapper
            #fileEditor(canny-mod='fileEditor')